Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
Using the query  -> select count(*) from table_name we can identify the total_number of records for each table
	
i. Attribute table = 10000
ii. Business table = 10000
iii. Category table = 10000
iv. Checkin table = 10000
v. elite_years table = 10000
vi. friend table = 10000
vii. hours table = 10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table = 10000
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.
-> using query (select count(DISTINCT key_name) from table_name)
i. 	Business =			10000 	(id)
ii. 	Hours =				1562 	(business_id)
iii. 	Category =			2643    (business_id)
iv. 	Attribute =			1115	(business_id)
v. 	Review =			10000	(id),		8090 (business_id), 	9581 (user_id)
vi. 	Checkin = 			493 	(business_id)
vii. 	Photo =				10000	(id),		6493 (business_id)
viii. 	Tip = 				537	(user_id),      3979 (business_id)
ix. 	User = 				10000	(id)
x. 	Friend = 			11	(user_id)
xi. 	Elite_years =	  2780	(user_id)
Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer:
	"no"
	
	SQL code used to arrive at answer:

	select id, name, review_count, yelping_since, useful, funny, cool, fans, average_stars, 
			   compliment_hot, compliment_more, compliment_profile, compliment_cute, compliment_list, 
			   compliment_note, compliment_plain, compliment_cool, compliment_funny, compliment_writer, compliment_photos
		from  user
		where 	id is null
				or name is null
				or review_count is null
				or yelping_since is null
				or useful is null
				or funny is null
				or cool is null
				or fans is null
				or average_stars is null
				or compliment_hot is null
				or compliment_more is null
				or compliment_profile is null
				or compliment_cute is null
				or compliment_list is null
				or compliment_note is null
				or compliment_plain is null
				or compliment_cool is null
				or compliment_funny is null
				or compliment_writer is null
				or compliment_photos is null
	

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min: 1		max: 5	avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min: 1		max: 5.0		avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min: 0		max: 1		avg: 0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min: 1		max: 53		avg: 1.9414
		
	
	v. Table: User, Column: Review_count
	
		min: 0		max: 2000	avg: 24.2995
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:

	select city,sum(review_count)  from business group by city order by sum(review_count) desc;
	
	Copy and Paste the Result Below:

+-----------------+-------------------+
| city            | sum(review_count) |
+-----------------+-------------------+
| Las Vegas       |             82854 |
| Phoenix         |             34503 |
| Toronto         |             24113 |
| Scottsdale      |             20614 |
| Charlotte       |             12523 |
| Henderson       |             10871 |
| Tempe           |             10504 |
| Pittsburgh      |              9798 |
| Montréal        |              9448 |
| Chandler        |              8112 |
| Mesa            |              6875 |
| Gilbert         |              6380 |
| Cleveland       |              5593 |
| Madison         |              5265 |
| Glendale        |              4406 |
| Mississauga     |              3814 |
| Edinburgh       |              2792 |
| Peoria          |              2624 |
| North Las Vegas |              2438 |
| Markham         |              2352 |
| Champaign       |              2029 |
| Stuttgart       |              1849 |
| Surprise        |              1520 |
| Lakewood        |              1465 |
| Goodyear        |              1155 |
+-----------------+-------------------+

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

select stars as STAR_RATING, count(stars) as COUNT from business where city = 'Avon' group by stars 

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):

+-------------+-------+
| STAR_RATING | COUNT |
+-------------+-------+
|         1.5 |     1 |
|         2.5 |     2 |
|         3.5 |     3 |
|         4.0 |     2 |
|         4.5 |     1 |
|         5.0 |     1 |
+-------------+-------+

ii. Beachwood

SQL code used to arrive at answer:

select stars as STAR_RATING, count(stars) as COUNT from business where city = 'Beachwood' group by stars 

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
		
+-------------+-------+
| STAR_RATING | COUNT |
+-------------+-------+
|         2.0 |     1 |
|         2.5 |     1 |
|         3.0 |     2 |
|         3.5 |     2 |
|         4.0 |     1 |
|         4.5 |     2 |
|         5.0 |     5 |
+-------------+-------+

7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
	
    select name, review_count from user  order by review_count desc limit 3;
		
	Copy and Paste the Result Below:
	+--------+--------------+
    | name   | review_count |
    +--------+--------------+
    | Gerald |         2000 |
    | Sara   |         1629 |
    | Yuri   |         1339 |
    +--------+--------------+
    


8. Does posing more reviews correlate with more fans?
    No

	Please explain your findings and interpretation of the results:
	
    query -> select name, fans, review_count from user order by fans desc limit 10;
    
    Result :
    +-----------+------+--------------+
    | name      | fans | review_count |
    +-----------+------+--------------+
    | Amy       |  503 |          609 |
    | Mimi      |  497 |          968 |
    | Harald    |  311 |         1153 |
    | Gerald    |  253 |         2000 |
    | Christine |  173 |          930 |
    | Lisa      |  159 |          813 |
    | Cat       |  133 |          377 |
    | William   |  126 |         1215 |
    | Fran      |  124 |          862 |
    | Lissa     |  120 |          834 |
    
    --- Cat has more fans than William but less review_count  similarly harald has more fans than gerald but less review count

	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer:
        more reviews with word "love"
	
	SQL code used to arrive at answer:

    select (select count(text) from review where text like "%love%") [LOVE_TEXT] ,(select count(text) from review where text like "%hate%") [HATE_TEXT]

    results :
        +-----------+-----------+
        | LOVE_TEXT | HATE_TEXT |
        +-----------+-----------+
        |      1780 |       232 |
        +-----------+-----------+


	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:

    select name, fans from user group by name order by fans desc limit 10;
	
	Copy and Paste the Result Below:

	+-----------+------+
    | name      | fans |
    +-----------+------+
    | Gerald    |  253 |
    | Lissa     |  120 |
    | bernice   |  105 |
    | Roanna    |  104 |
    | .Hon      |  101 |
    | Nieves    |   80 |
    | Sui       |   78 |
    | Koizumi   |   73 |
    | rebecca   |   69 |
    | Princeton |   64 |
    +-----------+------+

		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.

I choose "Las Vegas" as city and "Shopping" as Category

i. Do the two groups you chose to analyze have a different distribution of hours?

Yes, but not a huge difference. 2-3 stars has a total of 13 working days and 4-5 stars has 12.

SELECT  CASE WHEN stars >= 4 THEN "4-5 stars"
             WHEN stars >= 2 THEN "2-3 stars"
             ELSE "below 2"
             END star_rank,
        city, 
        c.category,
        count(distinct business.id) AS company_count,
        count(h.hours) AS working_days
FROM business
JOIN hours h ON business.id = h.business_id
JOIN category c ON business.id = c.business_id
WHERE city = "Las Vegas" AND c.category = "Shopping"
GROUP BY star_rank



ii. Do the two groups you chose to analyze have a different number of reviews?

Yes, the total number of reviews from 4-5 stars is doubled compared to 2-3 stars.

SELECT  CASE WHEN stars >= 4 THEN "4-5 stars"
             WHEN stars >= 2 THEN "2-3 stars"
             ELSE "below 2"
             END star_rank,
        city, 
        c.category,
        count(distinct business.id) AS company_count,
        sum(review_count) AS total_review
FROM business
JOIN category c ON business.id = c.business_id
WHERE city = "Las Vegas" AND c.category = "Shopping"
GROUP BY star_rank
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.

Stores that have 2-3 stars are within the same area , whereas 4-5 stars store are apart from each other according to the result of postal code.

SQL code used for analysis:

SELECT  CASE WHEN stars >= 4 THEN "4-5 stars"
             WHEN stars >= 2 THEN "2-3 stars"
             ELSE "below 2"
             END star_rank,
        address,
        neighborhood,
        city, 
        postal_code
FROM business
JOIN category c ON business.id = c.business_id
WHERE city = "Las Vegas" AND c.category = "Shopping"
ORDER BY star_rank
		
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1:

Total review is significantly higher between still open and closed businesses.        

ii. Difference 2:

The average stars given are very closed to each other 3.68 vs. 3.52. We can assume that businesses which are closed was not solely due to poor services / poor quality.     
         
         
SQL code used for analysis:

SELECT  CASE    WHEN is_open = 1 THEN "STILL OPEN"
                WHEN is_open = 0 THEN "CLOSED"
                END status, 
        count(distinct id) AS num_company,
        sum(review_count) AS total_review,
        round(avg(review_count),2) AS avg_review,
        round(avg(stars),2) AS avg_stars
FROM business
GROUP BY is_open
ORDER BY status DESC
	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
         
The analysis is to find out what are the most successful businesses based on the business category.

    
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:

In order to do this analysis, we will need data such as id, stars, and review count from the business table and category from category table. We will need to count the numbers of companies within each category, the average stars given by the consumers to see how they perform, and the total reviews given to see if the data is relevant and ensure it’s not biased.

Lastly, we’re only going to look at categories with at least 10 companies and an average of 3.5+ stars to reduce any irrelevant data
                  
iii. Output of your finished dataset:
 category               | num_companies | avg_stars | total_reviews |
+------------------------+---------------+-----------+---------------+
| Local Services         |            12 |      4.21 |           100 |
| Active Life            |            10 |      4.15 |           131 |
| Health & Medical       |            17 |      4.09 |           203 |
| Home Services          |            16 |       4.0 |            94 |
| Shopping               |            30 |      3.98 |           977 |
| Beauty & Spas          |            13 |      3.88 |           119 |
| American (Traditional) |            11 |      3.82 |          1128 |
| Food                   |            23 |      3.78 |          1781 |
| Bars                   |            17 |       3.5 |          1322 |
+------------------------+---------------+-----------+---------------+    
         
iv. Provide the SQL code you used to create your final dataset:

SELECT  category, 
        count(distinct id) AS num_companies, 
        round(avg(stars),2) AS avg_stars,
        sum(review_count) total_reviews
FROM business
JOIN category ON business.id = category.business_id
GROUP BY category
HAVING avg_stars >= 3.5 AND num_companies >= 10
ORDER BY avg_stars DESC